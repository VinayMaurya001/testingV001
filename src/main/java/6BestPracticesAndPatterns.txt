FIRST principle
	It is very popular in Agile Software testing world.
	F-Fast test
	I-Independent test
		One test should not be depend on other test,
		becuase in case of failure of one test method, there should not be failure of all test method
	R-Repeatable test
		Prod, qa, dev
	S-Self-validating test
		Boolean result, either pass or fail
	T-Timely test
		We should wrtie test on or before writing code
		
Test Doubles
	Test Doubles are common design patterns that are used across unit testing framework.

Gerard Meszaros
Analogy: Stunt doubles in movies

5 famous Test Doubles patterns:
	Dummy
	
	Stubs
		class DataServiceStub implements DataService {
		@Override
		public int[] retrieveAllData() {
			return new int[] { 24, 6, 15 };
		}
		}
		Disdavantages:
			We have to write Stub classes for each test.
	Mocks
		throw exception & can verify other method has been called
				Mockito.when(myList.get(0)).thenReturn("Rambo");// No exception even if list is empty
		
	Fake
		Some shortcuts like in-memory database etc. ie. rarely used
	Spies
		They are stubs that can spy or record any side effect when we are testing a particular testing method.
				Mockito.doReturn(3).when(myList).size();
		
		
Partial mocking using Mockito Spy
	ListTest.java

Spy vs Mock
It is recommended to use Mock instead of Spy.
	ListTest2.java
	
